{
  "projectName": "After Hours - Party Game Trilogy",
  "version": "1.0.0",
  "currentState": "Ready for Trilogy Implementation",
  "lastUpdated": "2025-05-22",
  "
": {
    "overview": "A dynamic social party game application that creates memorable interactions through progressive conversation prompts and challenges. Currently exists as a single 'Strangers: After Hours' experience, ready to be expanded into a trilogy of decks.",
    "vision": "Transform strangers into BFFs through three progressive game decks: Strangers → Friends → BFF: After Hours",
    "targetAudience": "Social groups looking to build deeper connections through structured conversation games"
  },
  "architecture": {
    "frontend": {
      "framework": "React with TypeScript",
      "routing": "wouter",
      "stateManagement": "@tanstack/react-query",
      "styling": "Tailwind CSS + shadcn/ui components",
      "forms": "react-hook-form with zodResolver",
      "animations": "framer-motion",
      "icons": "lucide-react"
    },
    "backend": {
      "runtime": "Node.js with Express",
      "database": "PostgreSQL with Drizzle ORM",
      "authentication": "Session-based with express-session",
      "realTime": "WebSocket support configured but not currently used",
      "deployment": "Replit environment"
    },
    "buildTools": {
      "bundler": "Vite",
      "typeScript": "tsx for server compilation",
      "cssProcessor": "PostCSS with Tailwind"
    }
  },
  "currentImplementation": {
    "screens": [
      {
        "name": "AccessCodeScreen",
        "purpose": "Entry point requiring access code validation",
        "features": ["Code validation", "Special codes support", "Usage tracking"]
      },
      {
        "name": "WelcomeScreen", 
        "purpose": "Game introduction and setup",
        "features": ["Game explanation", "How to play", "Start new game"]
      },
      {
        "name": "SetupScreen",
        "purpose": "Game configuration",
        "features": ["Player count", "Drinking mode toggle", "Difficulty selection"]
      },
      {
        "name": "GameScreen",
        "purpose": "Main gameplay interface",
        "features": ["Prompt display", "Level/intensity controls", "Challenge options", "Timer", "Statistics", "Progress tracking"]
      }
    ],
    "navigation": "Linear flow: Access → Welcome → Setup → Game"
  },
  "plannedImplementation": {
    "newFlow": "Home → Deck Selection → Game Setup → Game",
    "screens": [
      {
        "name": "HomeScreen",
        "purpose": "Welcome to After Hours experience",
        "content": "Brand introduction, trilogy explanation, call-to-action"
      },
      {
        "name": "DeckSelectionScreen", 
        "purpose": "Choose from trilogy of decks",
        "options": [
          "Strangers: After Hours - Break the ice",
          "Friends: After Hours - Deepen connections", 
          "BFF: After Hours - Strengthen closest bonds"
        ]
      },
      {
        "name": "GameSetupScreen",
        "purpose": "Current WelcomeScreen adapted for selected deck"
      }
    ]
  },
  "dataModel": {
    "prompts": {
      "total": 450,
      "source": "tools/full-template.csv",
      "structure": {
        "level": "1-3 (relationship depth)",
        "intensity": "1-3 (conversation depth)", 
        "text": "Prompt content",
        "category": "Icebreaker, Getting to Know You, Deeper Dive",
        "isCustom": "Boolean for user-generated content",
        "userId": "Creator reference for custom prompts"
      },
      "distribution": {
        "level1": 148,
        "level2": 151, 
        "level3": 150
      }
    },
    "challenges": {
      "regular": {
        "count": 100,
        "type": "Dare",
        "source": "dares-template.csv"
      },
      "rRated": {
        "count": 92,
        "type": "R-Rated Dare", 
        "source": "r-rated-dares-template.csv"
      }
    },
    "gameSession": {
      "tracking": ["currentLevel", "currentIntensity", "promptsAnswered", "fullHouseMoments", "totalTimeSpent", "levelStats"],
      "storage": "Database with localStorage backup for prompt history"
    },
    "accessCodes": {
      "purpose": "Entry control and customization",
      "specialCodes": {
        "VIVEKG": {
          "message": "Custom welcome message",
          "usageLimit": 10,
          "currentUsage": 2
        }
      }
    }
  },
  "keyFeatures": {
    "gameProgression": {
      "promptSelection": "Randomized within level/intensity, avoiding repeats",
      "difficultyScaling": "Manual level/intensity controls",
      "sessionTracking": "Statistics and progress monitoring"
    },
    "userExperience": {
      "responsiveDesign": "Mobile-first with tablet/desktop support",
      "accessibility": "Keyboard navigation, screen reader support",
      "animations": "Smooth transitions and micro-interactions",
      "theming": "Dark theme with purple accent colors"
    },
    "socialFeatures": {
      "drinkingMode": "Optional alcohol-related prompts/challenges",
      "timerFunction": "Configurable prompt timing",
      "challengeTypes": "Multiple challenge categories with intensity variation"
    }
  },
  "technicalImplementation": {
    "database": {
      "tables": [
        "users (authentication)",
        "prompts (game content)",
        "challenges (dare content)", 
        "game_sessions (progress tracking)",
        "access_codes (entry control)",
        "sessions (authentication sessions)"
      ],
      "orm": "Drizzle with PostgreSQL",
      "migrations": "npm run db:push for schema updates"
    },
    "api": {
      "endpoints": [
        "/api/auth/* (authentication)",
        "/api/prompts (content retrieval)",
        "/api/prompts/random (randomized selection)",
        "/api/challenges (dare content)",
        "/api/sessions (game tracking)",
        "/api/access-codes (entry validation)"
      ],
      "patterns": "RESTful with query-based filtering"
    },
    "state": {
      "client": "React Query for server state, useState for local state",
      "server": "Session-based authentication with database persistence",
      "localStorage": "Prompt usage tracking, game preferences"
    }
  },
  "designSystem": {
    "colors": {
      "primary": "Purple gradient (#8B5CF6 to #A855F7)",
      "background": "Dark slate (#1E293B, #334155)",
      "text": "White/light gray hierarchy",
      "accent": "Blue highlights for interactive elements"
    },
    "typography": {
      "headings": "Bold, large sizes for impact",
      "body": "Clean, readable sans-serif",
      "prompts": "Emphasis on readability and visual hierarchy"
    },
    "components": {
      "buttons": "Gradient backgrounds, rounded corners, hover effects",
      "cards": "Dark backgrounds with subtle borders",
      "modals": "Overlay with backdrop blur",
      "navigation": "Minimalist with clear visual states"
    }
  },
  "contentStrategy": {
    "prompts": {
      "level1": "Icebreakers and surface-level connection",
      "level2": "Deeper personal sharing and experiences", 
      "level3": "Vulnerable, intimate conversations for close relationships"
    },
    "intensityProgression": {
      "1": "Light, comfortable topics",
      "2": "Moderate depth, some personal revelation",
      "3": "Deep, potentially emotional or challenging topics"
    },
    "deckDifferentiation": {
      "strangers": "Focus on discovery and first impressions",
      "friends": "Building on existing relationships", 
      "bff": "Strengthening deep bonds and intimacy"
    }
  },
  "businessModel": {
    "approach": "Freemium with usage tracking",
    "monetization": "Access code system allows for premium experiences",
    "analytics": "Session tracking supports engagement analysis",
    "scalability": "Modular content system supports expansion"
  },
  "developmentWorkflow": {
    "environment": "Replit with hot reload",
    "commands": {
      "start": "npm run dev",
      "database": "npm run db:push",
      "import": "node optimized-import.js"
    },
    "dataImport": {
      "prompts": "optimized-import.js from tools/full-template.csv",
      "dares": "Manual import scripts for challenge content"
    }
  },
  "fileStructure": {
    "critical": [
      "client/src/App.tsx (routing)",
      "client/src/components/GameScreen.tsx (main game)",
      "client/src/components/WelcomeScreen.tsx (current entry)",
      "server/routes.ts (API endpoints)",
      "server/storage.database.ts (data layer)",
      "shared/schema.ts (type definitions)",
      "tools/full-template.csv (prompt content)"
    ],
    "configuration": [
      "package.json (dependencies)",
      "vite.config.ts (build config)",
      "tailwind.config.ts (styling)",
      "drizzle.config.ts (database)"
    ]
  },
  "nextSteps": {
    "immediate": [
      "Create HomeScreen component",
      "Build DeckSelectionScreen component", 
      "Adapt WelcomeScreen to GameSetupScreen",
      "Update routing in App.tsx",
      "Implement deck-specific branding"
    ],
    "future": [
      "Deck-specific prompt filtering",
      "Enhanced analytics dashboard",
      "Social sharing features",
      "Additional challenge types",
      "Multi-language support"
    ]
  },
  "recoveryInstructions": {
    "quickSetup": [
      "1. Clone/setup basic fullstack JavaScript project with React + Express",
      "2. Install dependencies from package.json", 
      "3. Set up PostgreSQL database with schema from shared/schema.ts",
      "4. Import prompts using: node optimized-import.js",
      "5. Import challenges from CSV files",
      "6. Configure authentication and session management",
      "7. Implement components following the file structure"
    ],
    "dataRecovery": [
      "Use tools/full-template.csv for 450 prompts",
      "Use existing import scripts for automated setup",
      "Database schema defined in shared/schema.ts",
      "All import scripts available in project root"
    ]
  },
  "specialNotes": {
    "authentication": "Currently using simple session-based auth, no external providers",
    "deployment": "Optimized for Replit environment, uses environment variables",
    "accessibility": "Keyboard navigation implemented, screen reader considerations",
    "performance": "Query caching via React Query, batch operations for data import",
    "security": "Access code system provides entry control, session management for auth"
  }
}